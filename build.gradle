buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath(
//                "org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE",
                "com.bmuschko:gradle-docker-plugin:3.0.3",
        )
    }
}

plugins {
    id "org.springframework.boot" version "1.5.6.RELEASE"
    id "org.asciidoctor.convert" version "1.5.2"
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'spring-boot'
//apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer


idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

def baseName = 'QDDT'
def version = '0.9.0'
group = 'no.nsd'
description = 'DASISH Task 3.2 Questionnaire Design and Documentation Tool (QDDT).'

jar {
    baseName = baseName
    version = version
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("org.springframework.hateoas:spring-hateoas")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.0.7.RELEASE")
    compile("org.springframework.cloud:spring-cloud-security:1.0.2.RELEASE")
    compile("org.jadira.usertype:usertype.extended:5.0.0.GA")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.5")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.8.5")
    compile("net.logstash.logback:logstash-logback-encoder:3.5")

    compile("org.springframework.data:spring-data-envers:1.1.9.RELEASE")
    compile("org.springframework.data:spring-data-jpa:1.11.9.RELEASE")
    compile("org.springframework.data:spring-data-commons:1.13.9.RELEASE")

    compile("org.hibernate:hibernate-core:5.1.10.Final")
    compile("org.hibernate:hibernate-envers:5.1.10.Final")
    compile("org.hibernate:hibernate-entitymanager:5.1.10.Final")
    compile("org.hibernate:hibernate-validator")

    compile("joda-time:joda-time")
    compile("javax.json:javax.json-api:1.1.2")
    compile("org.glassfish:javax.json:1.1.2")
    compile("io.jsonwebtoken:jjwt:0.9.0")

    compile("org.postgresql:postgresql:42.1.4")
//    compile("postgresql:postgresql:9.1-901-1.jdbc4")
    compile("com.itextpdf:itext7-core:7.0.5")

    testCompile(
            "junit:junit",
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test",
            "com.jayway.jsonpath:json-path",
            "org.springframework.restdocs:spring-restdocs-mockmvc:1.2.1.RELEASE"
    )
}
if(!org.gradle.internal.os.OperatingSystem.current().windows) {


    docker {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            url = 'http://localhost:2375'
        } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
            url = 'unix:///var/run/docker.sock'
        }
    }

    task createDBContainer(type: DockerCreateContainer) {
        imageId = 'postgres'
        containerName = "qddt_local"
        portBindings = ['5400:5432']
        env = ['POSTGRES_PASSWORD=qddt', 'POSTGRES_DB=qddt', 'POSTGRES_USER=qddt']
    }

    task startDBContainer(type: DockerStartContainer) {
        dependsOn createDBContainer
        targetContainerId { createDBContainer.getContainerId() }
    }

    task stopDBContainer(type: DockerStopContainer) {
        targetContainerId { createDBContainer.getContainerId() }
    }

    task destroyContainer(type: DockerRemoveContainer) {
        dependsOn stopDBContainer
        targetContainerId { createDBContainer.getContainerId() }
    }

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    bootRun {
        addResources = true
        mustRunAfter startDBContainer
        systemProperties['spring.profiles.active'] = 'local'
        dependsOn startDBContainer
        finalizedBy stopDBContainer
    }

    test {
        exclude 'no/nsd/qddt/QTTDTestSuite.class'
//    outputs.dir snippetsDir
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            showExceptions true
            exceptionFormat 'full'
            showCauses true
            showStackTraces true

        }
        systemProperties['spring.profiles.active'] = 'test'
        dependsOn startDBContainer
        finalizedBy(destroyContainer)
        destroyContainer.mustRunAfter(test)
    }

    asciidoctor {
        attributes 'snippets': snippetsDir
        inputs.dir snippetsDir
        dependsOn test
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}
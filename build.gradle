plugins {
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "org.asciidoctor.convert" version "1.5.9.2"
    id 'java'
    id 'idea'
}


group = 'no.nsd'
description = 'DASISH Task 3.2 Questionnaire Design and Documentation Tool (QDDT).'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}
repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-properties-migrator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-web'

//    implementation 'org.hibernate.orm:hibernate-core:6.0.0.Alpha6'
    implementation 'org.hibernate:hibernate-envers:5.4.26.Final' //, version: '6.0.0.Alpha6'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'joda-time:joda-time:2.10.8'

    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: '5.4.2'
//    compile group: 'org.springframework.cloud', name: 'spring-cloud-security', version: '2.2.4.RELEASE'

//    implementation("org.jadira.usertype:usertype.extended:5.0.0.GA")
    implementation("net.logstash.logback:logstash-logback-encoder:6.5")
    implementation("javax.json:javax.json-api")
    implementation("org.glassfish:javax.json:1.1.4")
    implementation("io.jsonwebtoken:jjwt:0.9.1")

    implementation("com.itextpdf:itext7-core:7.1.1")
    implementation("com.itextpdf:html2pdf:2.0.2")

//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    inputs.dir snippetsDir
    dependsOn test
}

//    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
//    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
//    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
//    compile group: 'javax.activation', name: 'activation', version: '1.1.1'

//    testCompile group: 'com.h2database', name: 'h2', version: '1.4.199'
//    testCompile(
//            "junit:junit",
//            "org.springframework.boot:spring-boot-starter-test",
//            "org.springframework.security:spring-security-test",
//            "com.jayway.jsonpath:json-path",
//            "org.springframework.restdocs:spring-restdocs-mockmvc:2.0.0.RELEASE",
//    )
//}

//asciidoctor {
//    sourceDir = file('docs')
//    outputDir = file('build/docs')
//}


//remotes {
//    web01 {
//        role 'masterNode'
//        host = 'qddt-dev.nsd.no'
//        user = System.properties['user.name']
//        agent = true
////		identity = file("${System.properties['user.home']}/.ssh/puttyPrivKey.ppk")
////		knownHosts = file("${System.properties['user.home']}/.ssh/known_hosts")
//    }
//}
//
//
//
//tasks.register("deploy") {
//    doLast {
//        ssh.run {
//            session(remotes.web01) {
//                execute 'cat /etc/*-release', ignoreError: true
//                execute 'cp ../deploy/deployment/test/QDDT.jar ../deploy/deployment/test/QDDT.jar.2019.old'
//                put from: file("$buildDir/libs/QDDT.jar"), into: '../deploy/deployment/test/QDDT.jar'
//				execute 'sudo systemctl restart qddt-test'
//            }
//        }
//    }
//}
//
//deploy.onlyIf { project.hasProperty('deployTest')}
